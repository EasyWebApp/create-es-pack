import {
    currentModulePath,
    packageNameOf,
    patch,
    findFile,
    packageOf
} from '@tech_query/node-toolkit';
import {
    CopyFilterSync,
    CopyFilterAsync,
    ensureDirSync,
    copy,
    readdirSync,
    readJSON,
    writeJSON,
    existsSync,
    removeSync,
    moveSync,
    outputFile
} from 'fs-extra';
import { join, extname } from 'path';
import Git, { SimpleGit } from 'simple-git/promise';

export const { path, meta } = packageOf(currentModulePath());

export async function bootGit(path: string, remote?: string | URL) {
    ensureDirSync(path);

    const git = Git(path);

    if (!(await git.checkIsRepo())) await git.init();

    if (!(await git.getRemotes(true))[0]) {
        if (!remote) {
            const package_name = packageNameOf(path),
                userID = (
                    await git.raw(['config', '--get', 'user.name'])
                )?.trim();

            if (userID)
                remote = `https://github.com/${userID}/${package_name}.git`;
            else
                throw ReferenceError(
                    '"user.name" must be configured in local Git'
                );
        }
        await git.addRemote('origin', remote + '');
    }

    return git;
}

/**
 * @param {String}   template - Path relative from `process.cwd()`
 * @param {String}   dist     - Path relative from `process.cwd()`
 * @param {Function} [filter]
 */
export async function copyFrom(
    template: string,
    dist: string,
    filter?: CopyFilterSync | CopyFilterAsync
) {
    await copy(template, dist, { overwrite: false, filter });

    for (const file of readdirSync(template))
        if (extname(file) === '.json') {
            const source = join(template, file),
                target = join(dist, file);

            await writeJSON(
                target,
                patch(await readJSON(target), await readJSON(source)),
                { spaces: 4 }
            );
        }
}

function fixIgnore(name: string, path = '.') {
    const ignore_0 = join(path, `.${name}ignore`),
        ignore_1 = join(path, `${name}ignore`);

    if (existsSync(ignore_0)) removeSync(ignore_1);
    else moveSync(ignore_1, ignore_0);
}

export async function setReadMe(
    this: Record<string, any>,
    project_path: string,
    git: SimpleGit,
    win32: boolean
) {
    const repo = /([^/]+\/[^/]+)\.git$/.exec(
        (await git.getRemotes(true))[0]?.refs.push
    )?.[1];

    await outputFile(
        join(project_path, 'ReadMe.md'),
        `# ${packageNameOf(project_path)}

Project generated by [${this.name}](${this.homepage})

[![NPM Dependency](https://david-dm.org/${repo}.svg)](https://david-dm.org/${repo})

${
    win32
        ? ''
        : `[![Build Status](https://travis-ci.com/${repo}.svg?branch=master)](https://travis-ci.com/${repo})`
}`
    );
}

export async function setAuthor(project_path: string, git: SimpleGit) {
    const data = packageOf(join(project_path, 'package.json'));

    data.meta.author = await git.raw(['config', '--get', 'user.email']);

    return data;
}

export async function setRoot(
    project_path: string,
    git: SimpleGit,
    system: NodeJS.Platform[] = []
): Promise<Record<string, any>> {
    await copyFrom(join(path, 'template'), project_path);

    fixIgnore('git', project_path), fixIgnore('npm', project_path);

    const win32 = system[0] === 'win32',
        config = await setAuthor(project_path, git);

    if (!findFile(/ReadMe(\.(md|markdown))?/i, project_path))
        await setReadMe.call(meta, project_path, git, win32);

    if (system[0]) config.meta.os = system;

    removeSync(
        join(project_path, `${win32 ? '.travis' : 'azure-pipelines'}.yml`)
    );
    await writeJSON(join(config.path, 'package.json'), config.meta, {
        spaces: 4
    });

    return config.meta;
}
