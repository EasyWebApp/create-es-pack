import { packageOf, currentModulePath, patch, findFile } from '@tech_query/node-toolkit';

import { resolve, join, extname } from 'path';

import {
    ensureDirSync, copy, readdirSync, readJSON, writeJSON, existsSync,
    removeSync, moveSync, outputFile
} from 'fs-extra';

import Git from 'simple-git/promise';

import crossSpawn from 'cross-spawn';


/**
 * @type {Object}
 */
export  const creator_meta = packageOf( currentModulePath() );


/**
 * @param {String} path
 *
 * @return {String}
 */
export  function packageNameOf(path) {

    path = resolve( path ).split( /[/\\]+/ );

    path = path.slice((path.slice(-2)[0][0] === '@')  ?  -2  :  -1).join('/');

    return  path.toLowerCase().replace(/[^@/\w]+/g, '-');
}


/**
 * @param {String}   command
 * @param {String[]} [args]
 * @param {Object}   [options]
 *
 * @return {Promise<String>}
 *
 * @see https://nodejs.org/dist/latest-v6.x/docs/api/child_process.html#child_process_child_process_spawnsync_command_args_options
 */
export  function spawn(command, args, options) {

    const process = crossSpawn(command, args, options);

    var { stdout } = process,  data = '';

    return  new Promise((resolve, reject) => {

        function exit(code, signal) {

            code ?
                reject( Object.assign(new Error( signal ),  { process }) )  :
                resolve( data );
        }

        process.on('exit', exit),  process.on('close', exit),
        process.on('error', reject),  process.on('disconnect', reject);

        if (! stdout)  return;

        stdout.on('data',  chunk => data += chunk);

        stdout.on('end',  resolve.bind(null, data));
    });
}


/**
 * @param {String}     path     - Local folder
 * @param {String|URL} [remote] - Git URL of a Remote repository
 *
 * @return {SimpleGit}
 */
export  async function bootGit(path, remote) {

    ensureDirSync( path );

    const git = Git( path );

    if (! (await git.checkIsRepo()))  await git.init();

    if (! (await git.getRemotes())[0]) {

        if (! remote) {

            const package_name = packageNameOf( path ),
                userID = await git.raw(['config', '--get', 'user.name']);

            remote = `https://github.com/${userID.trim()}/${package_name}`;
        }

        await git.addRemote('origin', remote);
    }

    return git;
}


/**
 * @param {String}   template - Path relative from this package
 * @param {String}   dist     - Path relative from `process.cwd()`
 * @param {Function} [filter]
 */
export  async function copyFrom(template, dist, filter) {

    template = join(creator_meta.path, template);

    await copy(template,  dist,  {overwrite: false, filter});

    const setting = readdirSync( template )
        .filter(file  =>  extname(file) === '.json');

    for (let file of setting) {

        const source = join(template, file), target = join(dist, file);

        await writeJSON(
            target,
            patch(await readJSON( target ),  await readJSON( source )),
            {spaces: 4}
        );
    }
}


function fixIgnore(name,  path = '.') {

    const ignore_0 = join(path, `.${name}ignore`),
        ignore_1 = join(path, `${name}ignore`);

    if (existsSync( ignore_0 ))
        removeSync( ignore_1 );
    else
        moveSync(ignore_1, ignore_0);
}

/**
 * @param {String}    path        - Project root
 * @param {SimpleGit} git         - Git repository instance of `path`
 * @param {String[]}  [system=[]] - https://docs.npmjs.com/files/package.json#os
 *
 * @return {Object} `package.json` data
 */
export  async function setRoot(path,  git,  system = []) {

    await copyFrom('./template', path);

    fixIgnore('git', path),  fixIgnore('npm', path);

    if (! findFile(/ReadMe(\.(md|markdown))?/i, path)) {

        const repo = /([^/]+\/[^/]+)\.git$/.exec(
            (await git.getRemotes( true ))[0].refs.push
        )[1];

        await outputFile(
            join(path, 'ReadMe.md'),
            `# ${packageNameOf( path )}

Project generated by [${creator_meta.meta.name}](${creator_meta.meta.homepage})

[![NPM Dependency](https://david-dm.org/${repo}.svg)](https://david-dm.org/${repo})`
        );
    }

    const config = join(path, 'package.json');

    const meta = await readJSON( config );

    meta.author = (await git.raw(['config', '--get', 'user.email'])).trim();

    if ( system[0] )  meta.os = system;

    removeSync(join(
        path,  `${(system[0] === 'win32') ? '.travis' : 'azure-pipelines'}.yml`
    ));

    await writeJSON(config,  meta,  {spaces: 4});

    return meta;
}


var index = 0;
/**
 * @param {String}                                                  title
 * @param {function(index: Number, title: String, end: Boolean): *} logic
 * @param {Boolean}                                                 [end] - `true` to reset index
 *
 * @return {*} Data returned by `logic`
 */
export  function step(title, logic, end) {

    title = ` ${++index}. ${title}`;

    console.info(`\n${title}\n ${'-'.repeat(title.length - 1)}`);

    logic = logic(index, title, end);

    if ( end )  index = 0;

    return logic;
}
